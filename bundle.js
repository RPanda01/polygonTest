/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles.css":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles.css ***!
  \**************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `body {\n  font-family: Arial, sans-serif;\n  margin: 20px;\n  padding: 0;\n  background-color: #232323;\n  color: #f5f5f5;\n}\n\n.container {\n  background: none;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.controls {\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.controls button {\n  margin: 0 10px;\n  padding: 10px 20px;\n  font-size: 16px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n#createBtn {\n  background-color: #4CAF50;\n  color: white;\n}\n\n#createBtn:hover {\n  background-color: #45a049;\n}\n\n#saveBtn {\n  background-color: #2196F3;\n  color: white;\n}\n\n#saveBtn:hover {\n  background-color: #1976D2;\n}\n\n#resetBtn {\n  background-color: #f44336;\n  color: white;\n}\n\n#resetBtn:hover {\n  background-color: #d32f2f;\n}\n\n.zones {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.zone {\n  width: 100%;\n  background: #2d2d2d;\n  border-color: #444;\n  border: 2px solid #ddd;\n  border-radius: 8px;\n  background: white;\n  overflow: hidden;\n  position: relative;\n}\n\n\n.zone-header {\n  background-color: #232323;\n  color: #f5f5f5;\n  padding: 10px;\n  font-weight: bold;\n  border-bottom: 1px solid #ddd;\n}\n\n.zone-content {\n  width: 100%;\n  position: relative;\n  max-height: 400px;\n}\n\n\n.buffer-zone .zone-header {\n  background-color: #232323;\n}\n\n.work-zone .zone-header {\n  background-color: #232323;\n}\n\n.buffer, .work {\n  border: 1px solid #ccc;\n  margin: 10px 0;\n  height: 300px;\n  overflow: auto;\n  position: relative;\n}\n\nsvg {\n  width: 100%;\n  height: 100%;\n  min-height: 300px;\n  cursor: grab;\n  background: #232323;\n}\n\nsvg:active {\n  cursor: grabbing;\n}\n\n.polygon {\n  cursor: move;\n  transition: opacity 0.2s;\n}\n\n.polygon:hover {\n  opacity: 0.8;\n}\n\n.drag-over {\n  background-color: #f0f8ff;\n  border-color: #4CAF50;\n  box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);\n}\n\n.polygon-group {\n  cursor: pointer;\n  transition: opacity 0.2s;\n}\n\n.polygon-group:hover {\n  opacity: 0.8;\n}\n\n.buffer-zone .polygon-group {\n  cursor: grab;\n}\n\n.buffer-zone .polygon-group:active {\n  cursor: grabbing;\n}\n\n.work-zone .polygon-group {\n  cursor: grab;\n}\n\n.work-zone .polygon-group:active {\n  cursor: grabbing;\n}\n\n\n.scale-x, .scale-y {\n  pointer-events: none;\n}\n\n.scale-x text, .scale-y text {\n  user-select: none;\n  pointer-events: none;\n}\n\n.scale-x line, .scale-y line {\n  pointer-events: none;\n}\n\n.scale-x rect, .scale-y rect {\n  pointer-events: none;\n}\n\n.instructions {\n  margin-top: 20px;\n  padding: 15px;\n  background-color: #fff3cd;\n  border: 1px solid #ffeaa7;\n  border-radius: 5px;\n}\n\n.instructions h3 {\n  margin-top: 0;\n  color: #856404;\n}\n\n.instructions ul {\n  margin-bottom: 0;\n  color: #856404;\n}`, \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://testfigures/./src/styles.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://testfigures/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://testfigures/./node_modules/css-loader/dist/runtime/noSourceMaps.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://testfigures/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://testfigures/./node_modules/style-loader/dist/runtime/insertBySelector.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://testfigures/./node_modules/style-loader/dist/runtime/insertStyleElement.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://testfigures/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://testfigures/./node_modules/style-loader/dist/runtime/styleDomAPI.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://testfigures/./node_modules/style-loader/dist/runtime/styleTagTransform.js?");

/***/ }),

/***/ "./src/bufferZone.js":
/*!***************************!*\
  !*** ./src/bufferZone.js ***!
  \***************************/
/***/ (() => {

eval("const storage = {\n    data: {},\n    setItem(key, value) {\n        this.data[key] = value;\n    },\n    getItem(key) {\n        return this.data[key] || null;\n    },\n    removeItem(key) {\n        delete this.data[key];\n    }\n};\n\nconst safeStorage = typeof localStorage !== 'undefined' ? localStorage : storage;\n\nclass BufferZone extends HTMLElement {\n    constructor() {\n        super();\n        this.polygons = [];\n        this.selectedPolygon = null;\n        this.eventHandlers = new Map(); // Для отслеживания обработчиков событий\n        this.innerHTML = `\n      <div class=\"zone-header\">Буферная зона</div>\n      <div class=\"zone-content\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1000 1000\"></svg>\n      </div>\n    `;\n    }\n\n    connectedCallback() {\n        const saved = safeStorage.getItem('polygons');\n        if (saved) {\n            try {\n                this.renderPolygons(JSON.parse(saved));\n            } catch (e) {\n                console.warn('Не удалось загрузить сохраненные полигоны');\n            }\n        }\n\n        // Добавляем поддержку drop для полигонов из рабочей зоны\n        const svg = this.querySelector('svg');\n        svg.addEventListener('dragover', e => e.preventDefault());\n        svg.addEventListener('drop', e => {\n            e.preventDefault();\n            const points = e.dataTransfer.getData('text/plain');\n            const source = e.dataTransfer.getData('source');\n\n            if (source === 'work') {\n                // Получаем координаты курсора в SVG буферной зоны\n                const svgPoint = this.getScaledCoordinates(e, svg);\n\n                // Вычисляем центр полигона\n                const originalPoints = points.split(' ').map(p => p.split(',').map(Number));\n                const centroid = originalPoints.reduce(\n                    (acc, [x, y]) => [acc[0] + x, acc[1] + y],\n                    [0, 0]\n                ).map(sum => sum / originalPoints.length);\n\n                // Смещаем полигон так, чтобы его центр был в точке курсора\n                const shiftX = svgPoint.x - centroid[0];\n                const shiftY = svgPoint.y - centroid[1];\n\n                const shiftedPoints = originalPoints.map(([x, y]) => [\n                    x + shiftX,\n                    y + shiftY\n                ]);\n\n                const newPointsStr = shiftedPoints.map(p => p.join(',')).join(' ');\n                this.addPolygon(newPointsStr);\n                document.querySelector('work-zone').removePolygon(points);\n            }\n        });\n    }\n\n    disconnectedCallback() {\n        // Очищаем все обработчики событий\n        this.eventHandlers.forEach(handlers => {\n            document.removeEventListener('mousemove', handlers.mousemove);\n            document.removeEventListener('mouseup', handlers.mouseup);\n        });\n        this.eventHandlers.clear();\n    }\n\n    addPolygon(points) {\n        // Добавляем полигон в массив, если его там еще нет\n        if (!this.polygons.includes(points)) {\n            this.polygons.push(points);\n            this.renderSinglePolygon(points, this.polygons.length - 1);\n            this.savePolygons();\n        }\n    }\n\n    renderSinglePolygon(points, index) {\n        const svg = this.querySelector('svg');\n        const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        g.classList.add('polygon-group');\n\n        const polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');\n        polygon.setAttribute('points', points);\n        polygon.setAttribute('fill', '#ff0000'); \n        polygon.setAttribute('stroke', '#ff0000');\n        polygon.setAttribute('stroke-width', '2');\n        polygon.classList.add('polygon');\n        polygon.dataset.points = points;\n\n        g.appendChild(polygon);\n        svg.appendChild(g);\n\n        this.setupPolygonHandlers(g, points);\n    }\n\n    renderPolygons(polygons) {\n        this.polygons = polygons;\n        const svg = this.querySelector('svg');\n        svg.innerHTML = '';\n\n        polygons.forEach((points, index) => {\n            this.renderSinglePolygon(points, index);\n        });\n    }\n\n    // Преобразование координат мыши в координаты SVG\n    getScaledCoordinates(e, svg) {\n        const rect = svg.getBoundingClientRect();\n        const viewBox = svg.viewBox.baseVal;\n\n        const scaleX = viewBox.width / rect.width;\n        const scaleY = viewBox.height / rect.height;\n\n        const x = (e.clientX - rect.left) * scaleX + viewBox.x;\n        const y = (e.clientY - rect.top) * scaleY + viewBox.y;\n\n        return { x, y };\n    }\n\n    setupPolygonHandlers(g, points) {\n        let isDragging = false;\n        let lastX, lastY;\n        let originalPoints = points.split(' ').map(p => p.split(',').map(Number));\n        let currentPoints = [...originalPoints];\n\n        const svg = this.querySelector('svg');\n\n        const mouseDownHandler = (e) => {\n            isDragging = true;\n            const coords = this.getScaledCoordinates(e, svg);\n            lastX = coords.x;\n            lastY = coords.y;\n            g.style.opacity = '0.7';\n            this.selectedPolygon = points;\n            e.preventDefault();\n            e.stopPropagation();\n        };\n\n        const handleMouseMove = (e) => {\n            if (isDragging && this.selectedPolygon === points) {\n                const coords = this.getScaledCoordinates(e, svg);\n\n                // Считаем дельту в координатах SVG\n                const deltaX = coords.x - lastX;\n                const deltaY = coords.y - lastY;\n\n                // Обновляем последние координаты\n                lastX = coords.x;\n                lastY = coords.y;\n\n                // Обновляем текущие точки\n                currentPoints = currentPoints.map(([x, y]) => [\n                    x + deltaX,\n                    y + deltaY\n                ]);\n\n                const newPointsStr = currentPoints.map(p => p.join(',')).join(' ');\n                g.querySelector('polygon').setAttribute('points', newPointsStr);\n\n                // Подсвечиваем рабочую зону при наведении (используем экранные координаты)\n                const workZone = document.querySelector('work-zone');\n                const workRect = workZone.getBoundingClientRect();\n\n                if (e.clientX >= workRect.left && e.clientX <= workRect.right &&\n                    e.clientY >= workRect.top && e.clientY <= workRect.bottom) {\n                    workZone.classList.add('drag-over');\n                } else {\n                    workZone.classList.remove('drag-over');\n                }\n            }\n        };\n\n        const handleMouseUp = (e) => {\n            if (isDragging && this.selectedPolygon === points) {\n                isDragging = false;\n                g.style.opacity = '1';\n\n                const workZone = document.querySelector('work-zone');\n                const workRect = workZone.getBoundingClientRect();\n\n                if (e.clientX >= workRect.left && e.clientX <= workRect.right &&\n                    e.clientY >= workRect.top && e.clientY <= workRect.bottom) {\n\n                    // Получаем координаты курсора в рабочей зоне с учетом масштаба и панорамирования\n                    const workSvg = workZone.querySelector('svg');\n                    const workRect = workSvg.getBoundingClientRect();\n                    const viewBox = workSvg.viewBox.baseVal;\n\n                    // Преобразуем экранные координаты в SVG координаты\n                    const scaleX = viewBox.width / workRect.width;\n                    const scaleY = viewBox.height / workRect.height;\n                    const svgX = (e.clientX - workRect.left) * scaleX + viewBox.x;\n                    const svgY = (e.clientY - workRect.top) * scaleY + viewBox.y;\n\n                    // Учитываем трансформацию рабочей зоны (масштаб и панорамирование)\n                    const realX = (svgX / workZone.scale) - workZone.panX;\n                    const realY = (svgY / workZone.scale) - workZone.panY;\n\n                    // Вычисляем центр текущего полигона\n                    const centroid = currentPoints.reduce(\n                        (acc, [x, y]) => [acc[0] + x, acc[1] + y],\n                        [0, 0]\n                    ).map(sum => sum / currentPoints.length);\n\n                    // Смещаем полигон так, чтобы его центр был в точке курсора\n                    const shiftX = realX - centroid[0];\n                    const shiftY = realY - centroid[1];\n\n                    const shiftedPoints = currentPoints.map(([x, y]) => [\n                        x + shiftX,\n                        y + shiftY\n                    ]);\n\n                    const newPointsStr = shiftedPoints.map(p => p.join(',')).join(' ');\n                    workZone.addPolygon(newPointsStr);\n                    this.removePolygon(points);\n                } else {\n                    // Обновляем originalPoints для следующего перемещения\n                    originalPoints = [...currentPoints];\n                    const newPointsStr = currentPoints.map(p => p.join(',')).join(' ');\n                    g.querySelector('polygon').setAttribute('points', newPointsStr);\n                    g.querySelector('polygon').dataset.points = newPointsStr;\n\n                    const index = this.polygons.indexOf(points);\n                    if (index > -1) {\n                        this.polygons[index] = newPointsStr;\n                    }\n                    this.savePolygons();\n                }\n\n                workZone.classList.remove('drag-over');\n                this.selectedPolygon = null;\n            }\n        };\n\n        // Добавляем обработчики событий\n        g.addEventListener('mousedown', mouseDownHandler);\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n\n        // Сохраняем ссылки на обработчики для последующего удаления\n        this.eventHandlers.set(points, {\n            mousemove: handleMouseMove,\n            mouseup: handleMouseUp,\n            mousedown: mouseDownHandler,\n            element: g\n        });\n\n        // Альтернативный способ - двойной клик для копирования\n        g.addEventListener('dblclick', () => {\n            const workZone = document.querySelector('work-zone');\n            workZone.addPolygon(points);\n        });\n    }\n\n    removePolygon(points) {\n        // Удаляем обработчики событий\n        if (this.eventHandlers.has(points)) {\n            const handlers = this.eventHandlers.get(points);\n            document.removeEventListener('mousemove', handlers.mousemove);\n            document.removeEventListener('mouseup', handlers.mouseup);\n            handlers.element.removeEventListener('mousedown', handlers.mousedown);\n            this.eventHandlers.delete(points);\n        }\n\n        // Удаляем из массива\n        const index = this.polygons.indexOf(points);\n        if (index > -1) {\n            this.polygons.splice(index, 1);\n        }\n\n        // Удаляем из DOM\n        const svg = this.querySelector('svg');\n        const polygons = Array.from(svg.querySelectorAll('polygon'));\n        polygons.forEach(poly => {\n            if (poly.getAttribute('points') === points || poly.dataset.points === points) {\n                poly.parentElement.remove();\n            }\n        });\n\n        // Сохраняем изменения\n        this.savePolygons();\n    }\n\n    savePolygons() {\n        try {\n            safeStorage.setItem('polygons', JSON.stringify(this.polygons));\n        } catch (e) {\n            console.warn('Не удалось сохранить полигоны');\n        }\n    }\n\n    getPolygonsData() {\n        return this.polygons;\n    }\n}\n\nif (!customElements.get('buffer-zone')) {\n    customElements.define('buffer-zone', BufferZone);\n}\n\n//# sourceURL=webpack://testfigures/./src/bufferZone.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles.css */ \"./src/styles.css\");\n/* harmony import */ var _bufferZone_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bufferZone.js */ \"./src/bufferZone.js\");\n/* harmony import */ var _bufferZone_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_bufferZone_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _workZone_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./workZone.js */ \"./src/workZone.js\");\n/* harmony import */ var _workZone_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_workZone_js__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nconst storage = {\n    data: {},\n    setItem(key, value) {\n        this.data[key] = value;\n    },\n    getItem(key) {\n        return this.data[key] || null;\n    },\n    removeItem(key) {\n        delete this.data[key];\n    }\n};\n\nconst safeStorage = typeof localStorage !== 'undefined' ? localStorage : storage;\n\nfunction generateRandomPolygons() {\n    const count = Math.floor(Math.random() * 12) + 4;\n    return Array.from({ length: count }, (_, index) => {\n        const centerX = 50 + Math.random() * 300;\n        const centerY = 50 + Math.random() * 200;\n        const radius = 20 + Math.random() * 40;\n        const sides = Math.floor(Math.random() * 5) + 3;\n\n        const points = [];\n        for (let i = 0; i < sides; i++) {\n            const angle = (i / sides) * 2 * Math.PI;\n            const r = radius * (0.7 + Math.random() * 0.6);\n            const x = centerX + Math.cos(angle) * r;\n            const y = centerY + Math.sin(angle) * r;\n            points.push(`${x.toFixed(1)},${y.toFixed(1)}`);\n        }\n\n        return points.join(' ');\n    });\n}\n\n// Обработчики событий\ndocument.addEventListener('DOMContentLoaded', () => {\n    document.getElementById('createBtn').onclick = () => {\n        const polygons = generateRandomPolygons();\n        document.querySelector('buffer-zone').renderPolygons(polygons);\n    };\n\n    document.getElementById('saveBtn').onclick = () => {\n        try {\n            const bufferZone = document.querySelector('buffer-zone');\n            const workZone = document.querySelector('work-zone');\n\n            const bufferData = bufferZone.getPolygonsData();\n            safeStorage.setItem('polygons', JSON.stringify(bufferData));\n\n            workZone.saveWorkZonePolygons();\n\n            alert('Состояние сохранено успешно!');\n        } catch (e) {\n            alert('Ошибка при сохранении');\n        }\n    };\n\n    document.getElementById('resetBtn').onclick = () => {\n        if (confirm('Вы уверены, что хотите сбросить все сохраненные данные?')) {\n            safeStorage.removeItem('polygons');\n            safeStorage.removeItem('workZonePolygons');\n            safeStorage.removeItem('workZoneScale');\n            safeStorage.removeItem('workZonePanX');\n            safeStorage.removeItem('workZonePanY');\n\n            document.querySelector('buffer-zone').renderPolygons([]);\n            document.querySelector('work-zone').clearPolygons();\n            alert('Данные сброшены!');\n        }\n    };\n});\n\n\n//# sourceURL=webpack://testfigures/./src/index.js?");

/***/ }),

/***/ "./src/styles.css":
/*!************************!*\
  !*** ./src/styles.css ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./styles.css */ \"./node_modules/css-loader/dist/cjs.js!./src/styles.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\noptions.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://testfigures/./src/styles.css?");

/***/ }),

/***/ "./src/workZone.js":
/*!*************************!*\
  !*** ./src/workZone.js ***!
  \*************************/
/***/ (() => {

eval("class WorkZone extends HTMLElement {\n    constructor() {\n\n        super();\n        this.scale = parseFloat(localStorage.getItem('workZoneScale')) || 1;\n        this.panX = parseFloat(localStorage.getItem('workZonePanX')) || 0;\n        this.panY = parseFloat(localStorage.getItem('workZonePanY')) || 0;\n        this.polygons = [];\n        this.selectedPolygon = null;\n        this.innerHTML = `\n      <div class=\"zone-header\">Рабочая зона</div>\n      <div class=\"zone-content\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1000 300\">\n          <g class=\"grid\"></g>\n          <g class=\"scale-x\"></g>\n          <g class=\"scale-y\"></g>\n          <g class=\"scale-ruler\"></g>\n          <g class=\"polygons\"></g>\n        </svg>\n      </div>\n    `;\n    }\n\n\n    getSVGCursorCoords(e, svg) {\n        const rect = svg.getBoundingClientRect();\n        const viewBox = svg.viewBox.baseVal;\n        const scaleX = viewBox.width / rect.width;\n        const scaleY = viewBox.height / rect.height;\n        return {\n            x: (e.clientX - rect.left) * scaleX + viewBox.x,\n            y: (e.clientY - rect.top) * scaleY + viewBox.y\n        };\n    }\n\n    connectedCallback() {\n        // Восстанавливаем масштаб и панорамирование из localStorage\n        const storage = typeof localStorage !== 'undefined' ? localStorage : {\n            data: {},\n            setItem(key, value) { this.data[key] = value; },\n            getItem(key) { return this.data[key] || null; }\n        };\n\n        this.scale = parseFloat(storage.getItem('workZoneScale')) || 1;\n        this.panX = parseFloat(storage.getItem('workZonePanX')) || 0;\n        this.panY = parseFloat(storage.getItem('workZonePanY')) || 0;\n\n        const svg = this.querySelector('svg');\n        const zoneContent = this.querySelector('.zone-content');\n\n        // Загружаем сохраненные полигоны рабочей зоны\n        this.loadWorkZonePolygons();\n\n        // Применяем трансформацию и рисуем сетку/шкалы\n        this.updateTransform(svg);\n        this.drawGrid();\n        this.drawScales();\n        this.drawScaleRuler();\n\n        this.enableZoomAndPan(svg, zoneContent);\n\n        svg.addEventListener('dragover', e => e.preventDefault())\n        svg.addEventListener('drop', e => {\n            e.preventDefault();\n            const points = e.dataTransfer.getData('text/plain');\n            const source = e.dataTransfer.getData('source');\n\n            // Получаем координаты курсора с учетом трансформации рабочей зоны\n            const rect = svg.getBoundingClientRect();\n            const viewBox = svg.viewBox.baseVal;\n            const scaleX = viewBox.width / rect.width;\n            const scaleY = viewBox.height / rect.height;\n            const svgX = (e.clientX - rect.left) * scaleX + viewBox.x;\n            const svgY = (e.clientY - rect.top) * scaleY + viewBox.y;\n\n            // Учитываем трансформацию (масштаб и панорамирование)\n            const realX = (svgX / this.scale) - this.panX;\n            const realY = (svgY / this.scale) - this.panY;\n\n            // Вычисляем центр полигона\n            const originalPoints = points.split(' ').map(p => p.split(',').map(Number));\n            const centroid = originalPoints.reduce(\n                (acc, [x, y]) => [acc[0] + x, acc[1] + y],\n                [0, 0]\n            ).map(sum => sum / originalPoints.length);\n\n            // Смещаем полигон так, чтобы его центр был в точке курсора\n            const shiftX = realX - centroid[0];\n            const shiftY = realY - centroid[1];\n\n            const shiftedPoints = originalPoints.map(([x, y]) => [\n                x + shiftX,\n                y + shiftY\n            ]);\n\n            const newPointsStr = shiftedPoints.map(p => p.join(',')).join(' ');\n            this.addPolygon(newPointsStr);\n\n            if (source === 'buffer') {\n                document.querySelector('buffer-zone').removePolygon(points);\n            }\n        });\n\n    }\n\n    clearPolygons() {\n        this.polygons = [];\n        const polygonsGroup = this.querySelector('.polygons');\n        polygonsGroup.innerHTML = '';\n        this.saveWorkZonePolygons();\n    }\n\n    addPolygon(points) {\n        // Добавляем в массив, если еще нет\n        if (!this.polygons.includes(points)) {\n            this.polygons.push(points);\n        }\n\n        const polygonsGroup = this.querySelector('.polygons');\n        const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        g.classList.add('polygon-group');\n\n        const polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');\n        polygon.setAttribute('points', points);\n        polygon.setAttribute('fill', 'rgba(255, 0, 0, 0.7)');\n        polygon.setAttribute('stroke', '#ff0000');\n        polygon.classList.add('polygon');\n        polygon.dataset.points = points;\n\n        g.appendChild(polygon);\n        polygonsGroup.appendChild(g);\n\n        this.setupPolygonDragAndDrop(g, points);\n\n        // Удаление по двойному клику\n        g.addEventListener('dblclick', () => {\n            if (confirm('Удалить этот полигон?')) {\n                this.removePolygonFromArray(points);\n                g.remove();\n                this.saveWorkZonePolygons();\n            }\n        });\n\n        this.saveWorkZonePolygons();\n    }\n\n    setupPolygonDragAndDrop(g, points) {\n        let isDragging = false;\n        let lastX, lastY;\n        let originalPoints = points.split(' ').map(p => p.split(',').map(Number));\n        let currentPoints = [...originalPoints];\n\n        const svg = this.querySelector('svg');\n\n        // Преобразование координат мыши в SVG-координаты\n        const getScaledCoordinates = (e, svg) => {\n            const rect = svg.getBoundingClientRect();\n            const viewBox = svg.viewBox.baseVal;\n            const scaleX = viewBox.width / rect.width;\n            const scaleY = viewBox.height / rect.height;\n            // Координаты относительно viewBox\n            const svgX = (e.clientX - rect.left) * scaleX + viewBox.x;\n            const svgY = (e.clientY - rect.top) * scaleY + viewBox.y;\n            // Учитываем масштаб и панорамирование рабочей зоны\n            const realX = (svgX / this.scale) - this.panX;\n            const realY = (svgY / this.scale) - this.panY;\n            return { x: realX, y: realY };\n        };\n\n        g.addEventListener('mousedown', e => {\n            if (e.target.closest('.polygon-group')) {\n                isDragging = true;\n                const coords = getScaledCoordinates(e, svg);\n                lastX = coords.x;\n                lastY = coords.y;\n                g.style.opacity = '0.7';\n                this.selectedPolygon = points;\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        });\n\n        const handleMouseMove = (e) => {\n            if (isDragging && this.selectedPolygon === points) {\n                const coords = getScaledCoordinates(e, svg);\n                const deltaX = coords.x - lastX;\n                const deltaY = coords.y - lastY;\n\n                lastX = coords.x;\n                lastY = coords.y;\n\n                currentPoints = currentPoints.map(([x, y]) => [\n                    x + deltaX,\n                    y + deltaY\n                ]);\n\n                const newPointsStr = currentPoints.map(p => p.join(',')).join(' ');\n                g.querySelector('polygon').setAttribute('points', newPointsStr);\n\n                // Подсвечиваем буферную зону при наведении\n                const bufferZone = document.querySelector('buffer-zone');\n                const bufferRect = bufferZone.getBoundingClientRect();\n\n                if (e.clientX >= bufferRect.left && e.clientX <= bufferRect.right &&\n                    e.clientY >= bufferRect.top && e.clientY <= bufferRect.bottom) {\n                    bufferZone.classList.add('drag-over');\n                } else {\n                    bufferZone.classList.remove('drag-over');\n                }\n            }\n        };\n\n        const handleMouseUp = (e) => {\n            if (isDragging && this.selectedPolygon === points) {\n                isDragging = false;\n                g.style.opacity = '1';\n\n                const bufferZone = document.querySelector('buffer-zone');\n                const bufferRect = bufferZone.getBoundingClientRect();\n\n                if (e.clientX >= bufferRect.left && e.clientX <= bufferRect.right &&\n                    e.clientY >= bufferRect.top && e.clientY <= bufferRect.bottom) {\n\n                    // Получаем координаты курсора в SVG буферной зоны\n                    const bufferSvg = bufferZone.querySelector('svg');\n                    const bufferSvgPoint = this.getSVGCursorCoords(e, bufferSvg);\n\n                    // Вычисляем центр текущего полигона\n                    const centroid = currentPoints.reduce(\n                        (acc, [x, y]) => [acc[0] + x, acc[1] + y],\n                        [0, 0]\n                    ).map(sum => sum / currentPoints.length);\n\n                    // Смещаем полигон так, чтобы его центр был в точке курсора\n                    const shiftX = bufferSvgPoint.x - centroid[0];\n                    const shiftY = bufferSvgPoint.y - centroid[1];\n\n                    const shiftedPoints = currentPoints.map(([x, y]) => [\n                        x + shiftX,\n                        y + shiftY\n                    ]);\n\n                    const newPointsStr = shiftedPoints.map(p => p.join(',')).join(' ');\n                    bufferZone.addPolygon(newPointsStr);\n                    this.removePolygonFromArray(points);\n                    g.remove();\n                    this.saveWorkZonePolygons();\n                } else {\n                    // Оставляем в текущей зоне с обновлёнными координатами\n                    const newPointsStr = currentPoints.map(p => p.join(',')).join(' ');\n                    g.querySelector('polygon').setAttribute('points', newPointsStr);\n                    g.querySelector('polygon').dataset.points = newPointsStr;\n\n                    const index = this.polygons.indexOf(points);\n                    if (index > -1) {\n                        this.polygons[index] = newPointsStr;\n                    }\n                    this.saveWorkZonePolygons();\n                }\n\n                bufferZone.classList.remove('drag-over');\n                this.selectedPolygon = null;\n                originalPoints = currentPoints;\n            }\n        };\n\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n    }\n\n    removePolygon(points) {\n        this.removePolygonFromArray(points);\n        const polygonsGroup = this.querySelector('.polygons');\n        const polygons = Array.from(polygonsGroup.querySelectorAll('polygon'));\n        polygons.forEach(poly => {\n            if (poly.getAttribute('points') === points || poly.dataset.points === points) {\n                poly.parentElement.remove();\n            }\n        });\n        this.saveWorkZonePolygons();\n    }\n\n    removePolygonFromArray(points) {\n        const index = this.polygons.indexOf(points);\n        if (index > -1) {\n            this.polygons.splice(index, 1);\n        }\n    }\n\n    enableZoomAndPan(svg, container) {\n        let isDragging = false;\n        let lastX, lastY;\n\n        container.addEventListener('wheel', e => {\n            e.preventDefault();\n\n            const rect = container.getBoundingClientRect();\n            const mouseX = e.clientX - rect.left;\n            const mouseY = e.clientY - rect.top;\n\n            const svgX = (mouseX / this.scale) - this.panX;\n            const svgY = (mouseY / this.scale) - this.panY;\n\n            // Шаг масштабирования 10%\n            const step = 0.1;\n            let newScale = this.scale + (e.deltaY > 0 ? -step : step);\n\n            // Ограничения\n            newScale = Math.max(0.1, Math.min(5, newScale));\n\n            // Округляем до ближайших 10%\n            newScale = Math.round(newScale * 10) / 10;\n\n            this.panX = (mouseX / newScale) - svgX;\n            this.panY = (mouseY / newScale) - svgY;\n\n            this.scale = newScale;\n\n            this.updateTransform(svg);\n            this.drawGrid();\n            this.drawScales();\n            this.drawScaleRuler();\n        });\n\n        container.addEventListener('mousedown', e => {\n            if (!e.target.closest('.polygon-group')) {\n                isDragging = true;\n                lastX = e.clientX;\n                lastY = e.clientY;\n                container.style.cursor = 'grabbing';\n                e.preventDefault();\n            }\n        });\n\n        const handlePanMove = (e) => {\n            if (isDragging) {\n                const deltaX = e.clientX - lastX;\n                const deltaY = e.clientY - lastY;\n\n                this.panX += deltaX / this.scale;\n                this.panY += deltaY / this.scale;\n\n                this.updateTransform(svg);\n                this.drawGrid();\n                this.drawScales();\n                this.drawScaleRuler();\n\n                lastX = e.clientX;\n                lastY = e.clientY;\n            }\n        };\n\n        const handlePanEnd = () => {\n            if (isDragging) {\n                isDragging = false;\n                container.style.cursor = 'grab';\n            }\n        };\n\n        document.addEventListener('mousemove', handlePanMove);\n        document.addEventListener('mouseup', handlePanEnd);\n    }\n\n    updateTransform(svg) {\n        const transformGroup = svg.querySelector('.polygons');\n        const gridGroup = svg.querySelector('.grid');\n\n        const transform = `scale(${this.scale}) translate(${this.panX}, ${this.panY})`;\n\n        transformGroup.setAttribute('transform', transform);\n        gridGroup.setAttribute('transform', transform);\n    }\n\n    drawGrid() {\n        const grid = this.querySelector('.grid');\n        grid.innerHTML = '';\n\n        // Определяем шаг сетки в зависимости от масштаба\n        let baseStep = 50;\n        let step = baseStep;\n\n        // Адаптивный шаг для разных масштабов\n        if (this.scale < 0.5) {\n            step = baseStep * 4;\n        } else if (this.scale < 1) {\n            step = baseStep * 2;\n        } else if (this.scale > 2) {\n            step = baseStep / 2;\n        } else if (this.scale > 4) {\n            step = baseStep / 4;\n        }\n\n        // Вычисляем видимую область с учетом трансформации\n        const visibleLeft = -this.panX;\n        const visibleTop = -this.panY;\n        const visibleRight = visibleLeft + (1000 / this.scale);\n        const visibleBottom = visibleTop + (400 / this.scale);\n\n        // Находим начальные и конечные позиции для линий сетки\n        const startX = Math.floor(visibleLeft / step) * step;\n        const endX = Math.ceil(visibleRight / step) * step;\n        const startY = Math.floor(visibleTop / step) * step;\n        const endY = Math.ceil(visibleBottom / step) * step;\n\n        // Рисуем вертикальные линии\n        for (let x = startX; x <= endX; x += step) {\n            const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n            line.setAttribute('x1', x);\n            line.setAttribute('y1', startY);\n            line.setAttribute('x2', x);\n            line.setAttribute('y2', endY);\n            line.setAttribute('stroke', '#e0e0e0');\n            line.setAttribute('stroke-width', 0.5 / this.scale);\n            grid.appendChild(line);\n        }\n\n        // Рисуем горизонтальные линии\n        for (let y = startY; y <= endY; y += step) {\n            const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n            line.setAttribute('x1', startX);\n            line.setAttribute('y1', y);\n            line.setAttribute('x2', endX);\n            line.setAttribute('y2', y);\n            line.setAttribute('stroke', '#e0e0e0');\n            line.setAttribute('stroke-width', 0.5 / this.scale);\n            grid.appendChild(line);\n        }\n    }\n\n    drawScales() {\n        this.drawXScale();\n        this.drawYScale();\n    }\n\n    drawXScale() {\n        const scaleX = this.querySelector('.scale-x');\n        scaleX.innerHTML = '';\n\n        let baseStep = 50;\n        let step = baseStep;\n\n        if (this.scale < 0.5) {\n            step = baseStep * 4;\n        } else if (this.scale < 1) {\n            step = baseStep * 2;\n        } else if (this.scale > 2) {\n            step = baseStep / 2;\n        } else if (this.scale > 4) {\n            step = baseStep / 4;\n        }\n\n        const bgRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        bgRect.setAttribute('x', 0);\n        bgRect.setAttribute('y', 0);\n        bgRect.setAttribute('width', 1000);\n        bgRect.setAttribute('height', 25);\n        bgRect.setAttribute('fill', 'rgba(248, 249, 250, 0.95)');\n        bgRect.setAttribute('stroke', '#dee2e6');\n        bgRect.setAttribute('stroke-width', '1');\n        scaleX.appendChild(bgRect);\n\n        // Вычисляем видимую область X\n        const visibleLeft = -this.panX;\n        const visibleRight = visibleLeft + (1000 / this.scale);\n        const startX = Math.floor(visibleLeft / step) * step;\n        const endX = Math.ceil(visibleRight / step) * step;\n\n        for (let x = startX; x <= endX; x += step) {\n            const screenX = (x + this.panX) * this.scale;\n\n            if (screenX >= 50 && screenX <= 1000) {\n                const majorTick = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n                majorTick.setAttribute('x1', screenX);\n                majorTick.setAttribute('y1', 20);\n                majorTick.setAttribute('x2', screenX);\n                majorTick.setAttribute('y2', 25);\n                majorTick.setAttribute('stroke', '#495057');\n                majorTick.setAttribute('stroke-width', '1');\n                scaleX.appendChild(majorTick);\n\n                const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n                text.setAttribute('x', screenX);\n                text.setAttribute('y', 15);\n                text.setAttribute('text-anchor', 'middle');\n                text.setAttribute('font-family', 'Arial, sans-serif');\n                text.setAttribute('font-size', '10');\n                text.setAttribute('fill', '#495057');\n                text.textContent = Math.round(x);\n                scaleX.appendChild(text);\n\n                if (step >= 20) {\n                    const halfStep = step / 2;\n                    const screenHalfX = ((x + halfStep) + this.panX) * this.scale;\n\n                    if (screenHalfX >= 50 && screenHalfX <= 1000) {\n                        const minorTick = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n                        minorTick.setAttribute('x1', screenHalfX);\n                        minorTick.setAttribute('y1', 22);\n                        minorTick.setAttribute('x2', screenHalfX);\n                        minorTick.setAttribute('y2', 25);\n                        minorTick.setAttribute('stroke', '#6c757d');\n                        minorTick.setAttribute('stroke-width', '0.5');\n                        scaleX.appendChild(minorTick);\n                    }\n                }\n            }\n        }\n\n        const title = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        title.setAttribute('x', 500);\n        title.setAttribute('y', 8);\n        title.setAttribute('text-anchor', 'middle');\n        title.setAttribute('font-family', 'Arial, sans-serif');\n        title.setAttribute('font-size', '12');\n        title.setAttribute('font-weight', 'bold');\n        title.setAttribute('fill', '#212529');\n        title.textContent = 'X';\n        scaleX.appendChild(title);\n    }\n\n    drawYScale() {\n        const scaleY = this.querySelector('.scale-y');\n        scaleY.innerHTML = '';\n\n        let baseStep = 50;\n        let step = baseStep;\n\n        if (this.scale < 0.5) {\n            step = baseStep * 4;\n        } else if (this.scale < 1) {\n            step = baseStep * 2;\n        } else if (this.scale > 2) {\n            step = baseStep / 2;\n        } else if (this.scale > 4) {\n            step = baseStep / 4;\n        }\n\n        const bgRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        bgRect.setAttribute('x', 0);\n        bgRect.setAttribute('y', 0);\n        bgRect.setAttribute('width', 30);\n        bgRect.setAttribute('height', 400);\n        bgRect.setAttribute('fill', 'rgba(248, 249, 250, 0.95)');\n        bgRect.setAttribute('stroke', '#dee2e6');\n        bgRect.setAttribute('stroke-width', '1');\n        scaleY.appendChild(bgRect);\n\n        // Вычисляем видимую область Y\n        const visibleTop = -this.panY;\n        const visibleBottom = visibleTop + (400 / this.scale);\n        const startY = Math.floor(visibleTop / step) * step;\n        const endY = Math.ceil(visibleBottom / step) * step;\n\n        for (let y = startY; y <= endY; y += step) {\n            const screenY = (y + this.panY) * this.scale;\n\n            if (screenY >= 50 && screenY <= 400) {\n                const majorTick = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n                majorTick.setAttribute('x1', 25);\n                majorTick.setAttribute('y1', screenY);\n                majorTick.setAttribute('x2', 30);\n                majorTick.setAttribute('y2', screenY);\n                majorTick.setAttribute('stroke', '#495057');\n                majorTick.setAttribute('stroke-width', '1');\n                scaleY.appendChild(majorTick);\n\n                const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n                text.setAttribute('x', 22);\n                text.setAttribute('y', screenY + 3);\n                text.setAttribute('text-anchor', 'end');\n                text.setAttribute('font-family', 'Arial, sans-serif');\n                text.setAttribute('font-size', '10');\n                text.setAttribute('fill', '#495057');\n                text.textContent = Math.round(y);\n                scaleY.appendChild(text);\n\n                if (step >= 20) {\n                    const halfStep = step / 2;\n                    const screenHalfY = ((y + halfStep) + this.panY) * this.scale;\n\n                    if (screenHalfY >= 50 && screenHalfY <= 400) {\n                        const minorTick = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n                        minorTick.setAttribute('x1', 27);\n                        minorTick.setAttribute('y1', screenHalfY);\n                        minorTick.setAttribute('x2', 30);\n                        minorTick.setAttribute('y2', screenHalfY);\n                        minorTick.setAttribute('stroke', '#6c757d');\n                        minorTick.setAttribute('stroke-width', '0.5');\n                        scaleY.appendChild(minorTick);\n                    }\n                }\n            }\n        }\n\n        const title = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        title.setAttribute('x', 8);\n        title.setAttribute('y', 200);\n        title.setAttribute('text-anchor', 'middle');\n        title.setAttribute('font-family', 'Arial, sans-serif');\n        title.setAttribute('font-size', '12');\n        title.setAttribute('font-weight', 'bold');\n        title.setAttribute('fill', '#212529');\n        title.setAttribute('transform', 'rotate(-90, 8, 200)');\n        title.textContent = 'Y';\n        scaleY.appendChild(title);\n    }\n\n    drawScaleRuler() {\n        const scaleRuler = this.querySelector('.scale-ruler');\n        scaleRuler.innerHTML = '';\n\n        // Позиция линейки (правый верхний угол)\n        const rulerX = 50;\n        const rulerY = 50;\n        const rulerWidth = 150;\n        const rulerHeight = 50;\n\n        // Вычисляем реальное расстояние для отрезка на экране\n        const referenceLength = 50; // пикселей на экране\n        const realLength = referenceLength / this.scale;\n\n        // Определяем подходящий масштаб для отображения\n        const displayLength = Math.round(realLength);\n        const unit = 'px';\n\n        // Рисуем линию масштаба\n        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        line.setAttribute('x1', rulerX + 10);\n        line.setAttribute('y1', rulerY + 20);\n        line.setAttribute('x2', rulerX + 10 + referenceLength);\n        line.setAttribute('y2', rulerY + 20);\n        line.setAttribute('stroke', '#ccc');\n        line.setAttribute('stroke-width', '2');\n        scaleRuler.appendChild(line);\n\n        // Засечки на концах\n        const leftTick = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        leftTick.setAttribute('x1', rulerX + 10);\n        leftTick.setAttribute('y1', rulerY + 15);\n        leftTick.setAttribute('x2', rulerX + 10);\n        leftTick.setAttribute('y2', rulerY + 25);\n        leftTick.setAttribute('stroke', '#ccc');\n        leftTick.setAttribute('stroke-width', '2');\n        scaleRuler.appendChild(leftTick);\n\n        const rightTick = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        rightTick.setAttribute('x1', rulerX + 10 + referenceLength);\n        rightTick.setAttribute('y1', rulerY + 15);\n        rightTick.setAttribute('x2', rulerX + 10 + referenceLength);\n        rightTick.setAttribute('y2', rulerY + 25);\n        rightTick.setAttribute('stroke', '#ccc');\n        rightTick.setAttribute('stroke-width', '2');\n        scaleRuler.appendChild(rightTick);\n\n        // Текст с расстоянием\n        const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        text.setAttribute('x', rulerX + 10 + referenceLength / 2);\n        text.setAttribute('y', rulerY + 12);\n        text.setAttribute('text-anchor', 'middle');\n        text.setAttribute('font-family', 'Arial, sans-serif');\n        text.setAttribute('font-size', '10');\n        text.setAttribute('font-weight', 'bold');\n        text.setAttribute('fill', '#ccc');\n        text.textContent = `${displayLength} ${unit}`;\n        scaleRuler.appendChild(text);\n\n        // Информация о масштабе\n        const scaleText = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        scaleText.setAttribute('x', rulerX);\n        scaleText.setAttribute('y', rulerY);\n        scaleText.setAttribute('text-anchor', 'start');\n        scaleText.setAttribute('font-family', 'Arial, sans-serif');\n        scaleText.setAttribute('font-size', '12');\n        scaleText.setAttribute('font-weight', 'bold');\n        scaleText.setAttribute('fill', '#ccc');\n        scaleText.textContent = `Масштаб: ${Math.round(this.scale * 100)}%`;\n        scaleRuler.appendChild(scaleText);\n    }\n\n    // Методы для сохранения и загрузки данных рабочей зоны\n    saveWorkZonePolygons() {\n        const storage = typeof localStorage !== 'undefined' ? localStorage : {\n            data: {},\n            setItem(key, value) { this.data[key] = value; },\n            getItem(key) { return this.data[key] || null; }\n        };\n\n        try {\n            storage.setItem('workZonePolygons', JSON.stringify(this.polygons));\n            storage.setItem('workZoneScale', this.scale);\n            storage.setItem('workZonePanX', this.panX);\n            storage.setItem('workZonePanY', this.panY);\n        } catch (e) {\n            console.warn('Не удалось сохранить данные');\n        }\n    }\n\n\n    loadWorkZonePolygons() {\n        const storage = typeof localStorage !== 'undefined' ? localStorage : {\n            data: {},\n            setItem(key, value) { this.data[key] = value; },\n            getItem(key) { return this.data[key] = value; }\n        };\n\n        const saved = storage.getItem('workZonePolygons');\n        if (saved) {\n            try {\n                const polygons = JSON.parse(saved);\n                polygons.forEach(points => {\n                    this.polygons.push(points);\n                    this.renderSinglePolygon(points);\n                });\n            } catch (e) {\n                console.warn('Не удалось загрузить сохраненные полигоны рабочей зоны');\n            }\n        }\n    }\n\n    renderSinglePolygon(points) {\n        const polygonsGroup = this.querySelector('.polygons');\n        const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        g.classList.add('polygon-group');\n\n        const polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');\n        polygon.setAttribute('points', points);\n        polygon.setAttribute('fill', 'rgba(255, 0, 0, 0.7)');\n        polygon.setAttribute('stroke', '#ff0000');\n        polygon.setAttribute('stroke-width', '2');\n        polygon.classList.add('polygon');\n        polygon.dataset.points = points;\n\n        g.appendChild(polygon);\n        polygonsGroup.appendChild(g);\n\n        this.setupPolygonDragAndDrop(g, points);\n\n        // Удаление по двойному клику\n        g.addEventListener('dblclick', () => {\n            if (confirm('Удалить этот полигон?')) {\n                this.removePolygonFromArray(points);\n                g.remove();\n                this.saveWorkZonePolygons();\n            }\n        });\n    }\n\n    getPolygonsData() {\n        return this.polygons;\n    }\n}\n\nif (!customElements.get('work-zone')) {\n    customElements.define('work-zone', WorkZone);\n}\n\n//# sourceURL=webpack://testfigures/./src/workZone.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;